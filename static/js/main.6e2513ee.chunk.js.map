{"version":3,"sources":["utils.js","SnakeBoard.js","Points.js","LeaderBoard.js","App.js","index.js"],"names":["range","number","Array","Math","round","keys","SnakeBoard","points","setPoints","useState","parseInt","localStorage","getItem","height","setHeight","width","setWidth","getInitialRows","initialRows","i","j","getObstacles","name","location","map","y","x","ceil","randomObstacle","floor","random","length","randomPosition","position","obstacle","some","setObstacle","rows","setRows","snake","setSnake","direction","setDirection","food","setFood","intervalId","setIntervalId","isGameOver","setIsGameOver","startGame","setStartGame","error","setError","useEffect","document","addEventListener","e","keyCode","displayRows","row","className","tile","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","newSnake","console","log","push","head","hitSnake","slice","find","b","hitWall","checkGameOver","pointsList","JSON","parse","prompt","setItem","stringify","window","dispatchEvent","Event","forEach","madonPaa","pop","newRows","displaySnake","placeholder","type","onChange","size","target","value","onClick","Points","getSnakePoints","LeaderBoard","setPointsList","sort","a","App","reload","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e2513ee.chunk.js","sourcesContent":["import {useEffect, useRef} from \"react\";\n/*\nThanks Dan Abramov for useInterval hook\nhttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\nThis useInterval Hook sets up an interval and clears it after unmounting.\nIt’s a combo of setInterval and clearInterval tied to the component lifecycle.\n*/\nexport const useInterval = (callback, delay, setIntervalId) => {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(\n    () => {\n      savedCallback.current = callback;\n    },\n    [callback]\n  );\n  // Set up the interval.\n  useEffect(\n    () => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        setIntervalId(id);\n        return () => clearInterval(id);\n      }\n    },\n    [delay, setIntervalId]\n  );\n};\n\nexport const range = (number) => [...Array(Math.round(number)).keys()]\n","import React, {useState, useEffect} from \"react\";\nimport {useInterval, range} from \"./utils\";\nimport \"./SnakeBoard.css\";\n\nconst SnakeBoard = ({points, setPoints}) => {\n  const [height, setHeight] = useState(\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 30\n  );\n  const [width, setWidth] = useState(\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 30\n  );\n  const getInitialRows = () => {\n    var initialRows = [];\n    for (var i = 0; i < height; i++) {\n      initialRows[i] = [];\n      for (var j = 0; j < width; j++) {\n        initialRows[i][j] = \"blank\";\n      }\n    }\n    return initialRows;\n  };\n\n  // const obstacles =\n  const getObstacles = () => [\n    {name: \"tyhjä\", location: []},\n    {\n      name: \"keski\",\n      location: range(width * 0.6).map(y => ({\n        x: Math.round(height / 2),\n        y: y + Math.ceil(width * 0.2)\n      }))\n    },\n    {\n      name: \"reunat\",\n      location: [\n        ...range(width).map(x => ({x, y: 0})),\n        ...range(width).map(x => ({x, y: width - 1})),\n        ...range(height).map(y => ({x: 0, y})),\n        ...range(height).map(y => ({x: height - 1, y}))\n      ]\n    },\n    {\n      name: \"oma\",\n      location: [{x: 2, y: 5}, {x: 2, y: 6}]\n    }\n  ];\n\n  const randomObstacle = () =>\n    getObstacles()[Math.floor(Math.random() * getObstacles().length)];\n\n  const randomPosition = () => {\n    const position = {\n      x: Math.floor(Math.random() * width),\n      y: Math.floor(Math.random() * height)\n    };\n    if (\n      obstacle.location.some(({x, y}) => position.x === x && position.y === y)\n    ) {\n      return randomPosition();\n    }\n    return position;\n  };\n\n  const [obstacle, setObstacle] = useState(randomObstacle());\n  const [rows, setRows] = useState(getInitialRows());\n  const [snake, setSnake] = useState([{x: 1, y: 1}]);\n  const [direction, setDirection] = useState(\"right\");\n  const [food, setFood] = useState(randomPosition());\n  const [intervalId, setIntervalId] = useState();\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(\n    () => {\n      if (width >= 10 && width <= 100 && height >= 10 && height <= 100) {\n        setObstacle(randomObstacle());\n        setRows(getInitialRows());\n        setFood(randomPosition());\n      }\n    },\n    [width, height]\n  );\n\n  const changeDirectionWithKeys = e => {\n    const {keyCode} = e;\n    switch (keyCode) {\n      case 37:\n        setDirection(\"left\");\n        break;\n      case 38:\n        setDirection(\"top\");\n        break;\n      case 39:\n        setDirection(\"right\");\n        break;\n      case 40:\n        setDirection(\"bottom\");\n        break;\n      default:\n        break;\n    }\n  };\n  document.addEventListener(\"keydown\", changeDirectionWithKeys);\n\n  const displayRows = rows.map((row, i) => (\n    <div className=\"Snake-row\" key={i}>\n      {row.map((tile, j) => (\n        <div className={`tile ${tile}`} key={`${i}-${j}`} />\n      ))}\n    </div>\n  ));\n\n  const displaySnake = () => {\n    const newRows = getInitialRows();\n    snake.forEach(tile => {\n      newRows[tile.x][tile.y] = \"snake\";\n    });\n    newRows[food.x][food.y] = \"food\";\n    obstacle.location.forEach(tile => {\n      newRows[tile.x][tile.y] = \"obstacle\";\n    });\n    setRows(newRows);\n  };\n\n  const checkGameOver = () => {\n    const head = snake[0];\n    const body = snake.slice(1, -1);\n    const hitSnake = body.find(b => b.x === head.x && b.y === head.y);\n    const hitWall = obstacle.location.some(\n      ({x, y}) => head.x === x && head.y === y\n    );\n    return hitSnake || hitWall;\n  };\n\n  const moveSnake = () => {\n    if (!startGame) return;\n    const newSnake = [];\n    console.log(\"direction\", direction, width, height, typeof width);\n    switch (direction) {\n      case \"right\":\n        newSnake.push({x: snake[0].x, y: (snake[0].y + 1) % width});\n        break;\n      case \"left\":\n        newSnake.push({x: snake[0].x, y: (snake[0].y - 1 + width) % width});\n        break;\n      case \"top\":\n        newSnake.push({\n          x: (snake[0].x - 1 + height) % height,\n          y: snake[0].y\n        });\n        break;\n      case \"bottom\":\n        newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y});\n        break;\n      default:\n        break;\n    }\n\n    if (checkGameOver()) {\n      setIsGameOver(true);\n      clearInterval(intervalId);\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\n      const name = prompt(\"Peli päättyi! Anna nimimerkkisi:\");\n      pointsList.push({name, points});\n      // [5,8] -> [{name: \"Nimi\", points: 5}, {name: \"Nimi\", points: 8}]\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\n      window.dispatchEvent(new Event(\"storage\"));\n    }\n\n    // Lisätään madolle joka askeleella uusi pala,\n    // joka poistetaan jos mato ei saa tällä askeleella ruokaa\n    snake.forEach(tile => {\n      newSnake.push(tile);\n    });\n    // Tarkistetaan saako mato ruuan kiinni\n    const madonPaa = snake[0];\n    if (madonPaa.x === food.x && madonPaa.y === food.y) {\n      setFood(randomPosition);\n      setPoints(points + 1);\n    } else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n    displaySnake();\n  };\n\n  useInterval(moveSnake, 150, setIntervalId);\n\n  return (\n    <div className=\"Snake-board\">\n      {!startGame && (\n        <>\n          <div>Pelilaudan koko on nyt {width} ruutua.</div>\n          <div>Aseta halutessasi uusi pelilaudan koko:</div>\n          <input\n            className=\"Board-size\"\n            placeholder=\"Koko 10-100\"\n            type=\"number\"\n            onChange={e => {\n              const size = parseInt(e.target.value);\n              if (size <= 100 && size >= 10) {\n                console.log(\"OK\", size);\n                setWidth(size);\n                setHeight(size);\n                localStorage.setItem(\"snake-board-size\", size);\n                setError(null);\n              } else {\n                console.error(\"ei hyvä\", size);\n                setError(\n                  `Pelilaudan koko on liian ${size > 100 ? \"suuri\" : \"pieni\"}`\n                );\n              }\n            }}\n          />\n          {error && <div className=\"Error\">{error}</div>}\n          <button className=\"Start-game\" onClick={setStartGame}>\n            Aloita peli\n          </button>\n        </>\n      )}\n      {startGame && displayRows}\n      {isGameOver && <div className=\"Game-over\">Game over!</div>}\n    </div>\n  );\n};\n\nexport default SnakeBoard;\n","import React from \"react\";\nimport \"./Points.css\";\n\nconst Points = ({points}) => {\n  return <div className=\"Points\">{points} pistettä</div>;\n};\n\nexport default Points;\n","import React, {useState} from \"react\";\nimport \"./LeaderBoard.css\";\n\nconst getSnakePoints = () =>\n  JSON.parse(localStorage.getItem(\"snake-points\")) || [];\n\nconst LeaderBoard = () => {\n  const [pointsList, setPointsList] = useState(getSnakePoints());\n\n  window.addEventListener(\"storage\", () => {\n    setPointsList(getSnakePoints());\n  });\n\n  return (\n    <div className=\"LeaderBoard\">\n      <div className=\"LeaderBoard-header\">Top 5</div>\n      <div className=\"LeaderBoard-points\">\n        {pointsList\n          .sort((a, b) => b.points - a.points)\n          .slice(0, 5)\n          .map((points, i) => (\n            <div key={`${points.points}-${i}`}>\n              {points.name} {points.points}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default LeaderBoard;\n","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport SnakeBoard from \"./SnakeBoard\";\nimport Points from \"./Points\";\nimport LeaderBoard from \"./LeaderBoard\";\n\nconst App = () => {\n  const [points, setPoints] = useState(0);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Matopeli</header>\n      <Points points={points} />\n      <SnakeBoard points={points} setPoints={setPoints} />\n      <button onClick={() => window.location.reload()}>Uusi peli</button>\n      <LeaderBoard />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}